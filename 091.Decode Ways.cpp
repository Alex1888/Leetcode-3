题意：
找到一个数字字符串可以转换称字母表达的次数。
方法一：DP
思路：
1.因为字符是一个一个解码的，有递推关系，后面的结果需要依靠前面的结果，而且有明显在最优子结构，因此使用dp的方法。
2.dp[i]表示在第i位一共有多少种情况。首先DP数组的大小比字符串大小大1，为了第一位是初始化的1，这样递推公式中DP数组的坐标就会比原字符串大一，因此判断的时候需要减1.
3.因为字母的范围在1-26，因此如果遇到0，没有办法组成字母，所以当不为0的时候，后一位等于前一位的值。
还需要判断2位数字组成的情况，如果前面两位组成的数字在10-26之间，那么当前位置的dp值还需要加上两位之前的DP值。
4.最后返回DP数组的最后一个位置上的值。
注意：
1.字符转换为数字的方法是-'0'
class Solution {
public:
    int numDecodings(string s) {
        vector<int>dp(s.size()+1,0);
        dp[0] = 1;
        for(int i = 1; i < dp.size();++i){
            if(s[i-1] != '0') dp[i] += dp[i-1];
            if(i >= 2 && ((s[i-2]-'0')*10 + s[i-1]-'0') >= 10 && ((s[i-2]-'0')*10 + s[i-1]-'0' <= 26)) dp[i] += dp[i-2];
        }
        return dp.back();
    }
};
